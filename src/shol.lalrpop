use std::ops::Range;
use crate::tokens::{Token, LexicalError};
use crate::ast;
use crate::semantics;
grammar;

// MARK: 構文

pub Program: ast::ProgramAST = {
    "nl"* <statements:Statement*> => {
        ast::ProgramAST {
            statements,
            meta: None,
        }
    }
};

Statement: ast::StatementAST = {
    <l:@L> "*" <name:"identf"> <r:@R> "nl"+ <resources:Resource*> <prules:MacroOrRuleSet*> => {
        ast::StatementAST::ColonyDecl {
            name,
            resources,
            rules: prules,
            location: l..r,
        }
    },
    <l:@L> "%" <name:"identf"> <r:@R> "nl"+ <resources:Resource*> <prules:MacroOrRuleSet*> => {
        ast::StatementAST::ColonyExtension {
            name,
            resources,
            rules: prules,
            location: l..r,
            meta: None
        }
    }
}

MacroOrRuleSet: ast::MacroOrRuleSetAST = {
    <Macro> => ast::MacroOrRuleSetAST::Macro(<>),
    <RuleSet> => ast::MacroOrRuleSetAST::RuleSet(<>),
}

Macro: ast::MacroAST = {
    "@debug" <message:"identf"?> "nl"+ => {
        ast::MacroAST::Debug { message: message.unwrap_or_default() }
    },
    "@sleep" <duration:"int"> "nl"+ => {
        ast::MacroAST::Sleep { duration: duration as usize }
    },
}

Resource: ast::ExprAST = {
    <Literal> "nl"+,
}

RuleSet: ast::RuleSetAST = {
    <first:FirstRule> <later:ParallelRule*> => {
        let mut rules = vec![first];
        rules.extend(later.into_iter().map(|r| r));
        ast::RuleSetAST { rules }
    }
}

FirstRule: ast::RuleAST = {
    "." <Rule> "nl"+
}

ParallelRule: ast::RuleAST = {
    "|" <Rule> "nl"+
}

// MARK: 規則

Rule: ast::RuleAST = {
    <conds:Conditions> <outs:Outputs> => {
        ast::RuleAST {
            conditions: conds,
            outputs: outs,
            meta: None,
        }
    },
}

Conditions: Vec<ast::ConditionAST> = {
    <mut v:SequentialCondition> => {
        let total_len = v.len();
        for c in v.iter_mut() {
            c.sqc_start = 0;
            c.sqc_end = total_len - 1;
        }
        v
    },
    <mut v:Conditions> "," <mut new_v:SequentialCondition> => {
        let total_len = v.len() + new_v.len();
        for c in new_v.iter_mut() {
            c.sqc_start = v.len();
            c.sqc_end = total_len - 1;
        }
        v.extend(new_v);
        v
    },
}

SequentialCondition: Vec<ast::ConditionAST> = {
    <Condition> => vec![<>],
    "[" <CommaListing<Condition>> "]",
}

Condition: ast::ConditionAST = {
    <l:@L> <expr:Expr> <r:@R> => ast::ConditionAST {
        expr: *expr,
        sqc_start: 0,
        sqc_end: 0,
        location: l..r,
        meta: None,
    },
}

Outputs: Vec<ast::OutputAST> = {
    <OutputsEndsWithDest> => <>.0,
    <OutputsEndsWithExpr> => <>.0,
}
OutputsEndsWithDest: (Vec<ast::OutputAST>, Option<String>, Range<usize>) = {
    <l:@L> <dest:"#xx"> <r:@R> => (vec![], dest, l..r),
}
OutputsEndsWithExpr: (Vec<ast::OutputAST>, Option<String>, Range<usize>) = {
    <mut vd:OutputsEndsWithDest> <expr:Expr> => {
        vd.0.push(ast::OutputAST {
            expr: *expr,
            destination: vd.1.clone(),
            destination_location: vd.2.clone(),
            meta: None,
        });
        vd
    },
    <mut vd:OutputsEndsWithExpr> "," <expr:Expr> => {
        vd.0.push(ast::OutputAST {
            expr: *expr,
            destination: vd.1.clone(),
            destination_location: vd.2.clone(),
            meta: None,
        });
        vd
    },
}

// MARK: 式

Expr: Box<ast::ExprAST> = {
    #[precedence(level="1")]
    <l:@L> <name:"$xx"> <r:@R> =>
        Box::new(ast::ExprAST::Capture(name, l..r)),
    "(" <TopLevelExpr> ")",
    <l:@L> "-" <r:@R> <e:Expr> =>
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::Neg, e, l..r)),
    <l:@L> "!" <r:@R> <e:Expr> =>
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::LogicalNot, e, l..r)),
    <l:@L> "~" <r:@R> <e:Expr> =>
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::BitNot, e, l..r)),

    #[precedence(level="2")] // Literal の SignedInt を 単項演算子 `-` より優先
    <Literal> => Box::new(<>),

    #[precedence(level="3")]
    <e:Expr> <l:@L> ":int" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::As(semantics::Type::Int), e, l..r))
    },
    <e:Expr> <l:@L> ":double" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::As(semantics::Type::Double), e, l..r))
    },
    <e:Expr> <l:@L> ":str" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::As(semantics::Type::String), e, l..r))
    },
    <e:Expr> <l:@L> ":bool" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::As(semantics::Type::Bool), e, l..r))
    },
    <e:Expr> <l:@L> ":symbol" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::As(semantics::Type::Symbol), e, l..r))
    },
    <e:Expr> <l:@L> ".int" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::ToInt, e, l..r))
    },
    <e:Expr> <l:@L> ".double" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::ToDouble, e, l..r))
    },
    <e:Expr> <l:@L> ".str" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::ToString, e, l..r))
    },
    <e:Expr> <l:@L> ".ceil" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilCeil, e, l..r))
    },
    <e:Expr> <l:@L> ".floor" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilFloor, e, l..r))
    },
    <e:Expr> <l:@L> ".round" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilRound, e, l..r))
    },
    <e:Expr> <l:@L> ".abs" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilAbs, e, l..r))
    },
    <e:Expr> <l:@L> ".ord" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilOrd, e, l..r))
    },
    <e:Expr> <l:@L> ".chr" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilChr, e, l..r))
    },
    <e:Expr> <l:@L> ".len" <r:@R> => {
        Box::new(ast::ExprAST::UnaryOp(ast::UnaryOpcode::UtilLen, e, l..r))
    },
    <e:Expr> <l:@L> "[" <start:TopLevelExpr?> ":" <end:TopLevelExpr?> "]" <r:@R> => {
        Box::new(ast::ExprAST::Slice(e, start, end, None, l..r))
    },
    <e:Expr> <l:@L> "[" <start:TopLevelExpr?> ":" <end:TopLevelExpr?> ":" <step:TopLevelExpr?> "]" <r:@R> => {
        Box::new(ast::ExprAST::Slice(e, start, end, step, l..r))
    },

    #[precedence(level="4")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "*" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Mul, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "/" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Div, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "%" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Mod, rhs, l..r))
    },

    #[precedence(level="5")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "+" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Add, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "-" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Sub, rhs, l..r))
    },

    #[precedence(level="6")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "<<" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::BitShiftLeft, rhs, l..r))
    },
    <lhs:Expr> <l:@L> ">>" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::BitShiftRight, rhs, l..r))
    },

    #[precedence(level="7")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "=" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Eq, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "!=" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Ne, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "<" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Lt, rhs, l..r))
    },
    <lhs:Expr> <l:@L> ">" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Gt, rhs, l..r))
    },
    <lhs:Expr> <l:@L> "<=" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Le, rhs, l..r))
    },
    <lhs:Expr> <l:@L> ">=" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::Ge, rhs, l..r))
    },

    #[precedence(level="8")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "&" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::BitAnd, rhs, l..r))
    },

    #[precedence(level="9")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "^" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::BitXor, rhs, l..r))
    },

    #[precedence(level="10")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "|" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::BitOr, rhs, l..r))
    },

    #[precedence(level="11")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "&&" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::LogicalAnd, rhs, l..r))
    },

    #[precedence(level="12")] #[assoc(side="left")]
    <lhs:Expr> <l:@L> "||" <r:@R> <rhs:Expr> => {
        Box::new(ast::ExprAST::BinaryOp(lhs, ast::Opcode::LogicalOr, rhs, l..r))
    },
}

// MARK: リテラル

Literal: ast::ExprAST = {
    <SignedInt> =>
        ast::ExprAST::Number(<>),
    <SignedDouble> =>
        ast::ExprAST::Double(<>),
    "identf" =>
        ast::ExprAST::Str(<>),
    "str" =>
        ast::ExprAST::Str(<>),
    "symbol" =>
        ast::ExprAST::Symbol(<>),
    "true" =>
        ast::ExprAST::Bool(true),
    "false" =>
        ast::ExprAST::Bool(false),
}

SignedInt: i32 = {
    <n:"int"> => n,
    "-" <n:"int"> => -n,
    <"intmin">,
}

SignedDouble: f64 = {
    <n:"double"> => n,
    "-" <n:"double"> => -n,
}

// MARK: ヘルパー非終端記号

// カンマ区切りで 1 つ以上列挙する構文
CommaListing<T>: Vec<T> = {
    T => vec![<>],
    <mut v:CommaListing<T>> "," <e:T> => {
        v.push(e);
        v
    }
}

// Expr の内部から #[precedence(level)] 最高レベルにアクセスするために使用
// Lalrpop の仕様上, 自分より高いレベルの生成規則に直接アクセスすることはできないため
TopLevelExpr: Box<ast::ExprAST> = {
    <Expr>,
}

// MARK: トークン (終端記号)

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "identf" => Token::Identifier(<String>),
        "double" => Token::DoubleLiteral(<f64>),
        "int" => Token::IntegerLiteral(<i32>),
        "intmin" => Token::IntegerMin(<i32>),
        "str" => Token::StringLiteral(<String>),
        "symbol" => Token::SymbolLiteral(<String>),
        "true" => Token::True,
        "false" => Token::False,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "=" => Token::Equal,
        "!=" => Token::NotEqual,
        "<" => Token::LessThan,
        ">" => Token::GreaterThan,
        "<=" => Token::LessEqual,
        ">=" => Token::GreaterEqual,
        "+" => Token::Add,
        "-" => Token::Sub,
        "*" => Token::Mul,
        "/" => Token::Div,
        "%" => Token::Mod,
        "&" => Token::Ampersand,
        "|" => Token::Pipe,
        "^" => Token::Caret,
        "~" => Token::Tilde,
        "<<" => Token::BitShiftLeft,
        ">>" => Token::BitShiftRight,
        "&&" => Token::LogicalAnd,
        "||" => Token::LogicalOr,
        "!" => Token::LogicalNot,
        ":" => Token::Colon,
        ":int" => Token::AsInt,
        ":double" => Token::AsDouble,
        ":str" => Token::AsStr,
        ":bool" => Token::AsBool,
        ":symbol" => Token::AsSymbol,
        ".int" => Token::ToInt,
        ".double" => Token::ToDouble,
        ".str" => Token::ToString,
        ".ceil" => Token::UtilCeil,
        ".floor" => Token::UtilFloor,
        ".round" => Token::UtilRound,
        ".abs" => Token::UtilAbs,
        ".ord" => Token::UtilOrd,
        ".chr" => Token::UtilChr,
        ".len" => Token::UtilLen,
        "." => Token::Dot,
        "," => Token::Comma,
        "@debug" => Token::AtDebug,
        "@sleep" => Token::AtSleep,
        "#xx" => Token::Destination(<Option<String>>),
        "$xx" => Token::Capture(<String>),
        "nl" => Token::NewLine,
    }
}
